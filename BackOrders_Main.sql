SELECT
    			 A.ORDER_NO,
                  IP.PLANNER_BUYER,
                 A. RAW_MATERIAL,
                 IP.DESCRIPTION,
                 IP.ACCOUNTING_GROUP,
                 A.QTY_REQUIRED,
                 A.REMAINING_SHOPORD_QTY,
                 A.DATE_ENTERED,
                 A.NEED_YEAR,
                 A.PRIORITY_CATEGORY,
                 nvl(A.BACKORDERS,0) as BACKORDERS,
--                 NVL(SUM(INV.QTY_IN_TRANSIT),0) AS QTY_IN_TRANSIT,
--                NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Picking%' AND INV.LOCATION_NO LIKE  'RM%' THEN INV.QTY_ONHAND ELSE 0 END),0) AS RM_STOCK,
--                NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Picking%' AND (INV.LOCATION_NO LIKE 'SP-%' OR INV.LOCATION_NO LIKE 'SS-ADM' OR INV.LOCATION_NO LIKE 'STA-MP'OR INV.LOCATION_NO LIKE 'STA-SP' OR INV.LOCATION_NO LIKE 'KP-SUBST' 
--                OR INV.LOCATION_NO LIKE 'MP-%') THEN INV.QTY_ONHAND ELSE 0 END),0) AS WIP,
--                NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Production%' THEN INV.QTY_ONHAND ELSE 0 END),0) AS WIP2,
               ( (NVL(SUM(INV.QTY_IN_TRANSIT),0) +  NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Picking%' AND INV.LOCATION_NO LIKE  'RM%' THEN INV.QTY_ONHAND ELSE 0 END),0) + NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Picking%' AND (INV.LOCATION_NO LIKE 'SP-%' OR INV.LOCATION_NO LIKE 'SS-ADM' OR INV.LOCATION_NO LIKE 'STA-MP'OR INV.LOCATION_NO LIKE 'STA-SP' OR INV.LOCATION_NO LIKE 'KP-SUBST' 
                OR INV.LOCATION_NO LIKE 'MP-%') THEN INV.QTY_ONHAND ELSE 0 END),0) +  NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Production%' THEN INV.QTY_ONHAND ELSE 0 END),0))-( nvl(A.BACKORDERS,0) )) as Free_Bal,
                (( (NVL(SUM(INV.QTY_IN_TRANSIT),0) +  NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Picking%' AND INV.LOCATION_NO LIKE  'RM%' THEN INV.QTY_ONHAND ELSE 0 END),0) + NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Picking%' AND (INV.LOCATION_NO LIKE 'SP-%' OR INV.LOCATION_NO LIKE 'SS-ADM' OR INV.LOCATION_NO LIKE 'STA-MP'OR INV.LOCATION_NO LIKE 'STA-SP' OR INV.LOCATION_NO LIKE 'KP-SUBST' 
                OR INV.LOCATION_NO LIKE 'MP-%') THEN INV.QTY_ONHAND ELSE 0 END),0) +  NVL(SUM(CASE WHEN INV.LOCATION_TYPE LIKE 'Production%' THEN INV.QTY_ONHAND ELSE 0 END),0))-( nvl(A.BACKORDERS,0) )) - A.QTY_REQUIRED) as Available 
                
FROM
    (
        SELECT
            ORDER_NO,
            PRIORITY_CATEGORY,
            PART_NO,
            RAW_MATERIAL,
            QTY_REQUIRED,
            (REVISED_QTY_DUE-QTY_COMPLETE-OPERATION_SCRAPPED) as REMAINING_SHOPORD_QTY,
			DATE_ENTERED,
            EXTRACT(YEAR FROM NEED_DATE) AS NEED_YEAR,
            SUM(QTY_REQUIRED)
            OVER(PARTITION BY RAW_MATERIAL
                 ORDER BY
                     EXTRACT(YEAR FROM NEED_DATE),
                     PRIORITY_CATEGORY,
                     ORDER_NO
                ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
            )                            AS BACKORDERS
        FROM
            DSIGRP_DSI_SHOP_MATERIALS_IAL
        WHERE
            CONTRACT LIKE 'DSI1'
            AND QTY_REQUIRED > 0 
            --AND ORDER_NO NOT LIKE 'B%'
            AND STATE <> 'Closed'
            AND STATE <> 'Cancelled'
            AND STATE <> 'Parked'
            --AND PRIORITY_CATEGORY IS NOT NULL
            AND RAW_MATERIAL LIKE 'I%' OR  RAW_MATERIAL like 'L%' OR  RAW_MATERIAL like 'R%'
            
    ) A
LEFT  JOIN INVENTORY_PART_IN_STOCK_UIV INV
ON A.RAW_MATERIAL=INV.PART_NO
 LEFT JOIN INVENTORY_PART IP 
 ON A.RAW_MATERIAL=IP.PART_NO

WHERE IP.CONTRACT LIKE 'DSI1' 
GROUP BY 		 A.ORDER_NO,
 				 IP.PLANNER_BUYER,
                 A.PART_NO,
                 IP.ACCOUNTING_GROUP,
                  IP.DESCRIPTION,
                  A.DATE_ENTERED,
                 A.NEED_YEAR,
                 A. RAW_MATERIAL,
                 A.QTY_REQUIRED,
                 A.REMAINING_SHOPORD_QTY,
                 A.PRIORITY_CATEGORY,
                 A.BACKORDERS    
    
   
ORDER BY
    A.NEED_YEAR,
    A.PRIORITY_CATEGORY,
    A.ORDER_NO ASC;
    
